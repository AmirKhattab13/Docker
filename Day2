# Docker
Labs for ITI course - Day2
######################################

## P1 - Creating Nginx docker image based on ubuntu
## Creating dir containing dockerfile, index.html, index.tar
   $ mkdir KhattabImg
   $ cd /KhattabImg
   $ touch index.html; ehco 'Amir Khattab' > index.html
   $ tar -cf index.tar index.html
## Editing dockerfile
   $ vim dockerfile
## Specifying the base image
   FROM ubuntu
## Updating the package list and installing Nginx
   RUN apt-get update && \
       apt-get install -y nginx
## Copying the index.html, ADD 'Extracts the file'
   COPY index.html /var/www/html/
   ADD index.tar /var/www/html/
## Exposing port 80
   EXPOSE 80
## CMD 'Running the Nginx web server inside the container'
## -g 'Sets it to run in the foreground'
## daemon off 'Allowing the container to remain running as long as the server is running'
   CMD ["nginx", "-g", "daemon off;"]
 ###########End Of dockerfile##########
## Build the Docker image, to prevent error occuring make sure the docker daemon is running
   $ systemctl start docker
   $ docker build -t my-nginx-image 
## Running th docker container with port mapping
   $ docker run -it -d --name Amir -p 80:80 my-nginx-image
## Test the index   
   $ curl http://localhost:80
   
## P2 - Creating MySQL database docker image from MySQL
## Creating docker file
   $ mkdir /MySQLimg
   $ cd /MySQLimg
   $ vim dockerfile
##### Start of dockerfile #####   
   FROM mysql:latest
## Set MySQL_ROOT_PASSWORD
   ENV MYSQL_ROOT_PASSWORD=P4sSw0rd0!
## Creating volume
   VOLUME mysql_data
 ##### End of dockerfile #####   
## Building the image, Note: the image tag must be in lowercase 
   $ docker build -t mysql_img .
## Creating container and mounting the volume
   $ docker run -d -v mysql_data:/var/lib/mysql --name C1 mysql_img

## P3 - What is the rest of docker networks?
1. Bridge Network: This is the default network type in Docker, and it is used to enable communication between containers on the same host. 
   It allows containers to communicate with each other via IP addresses.
2. Host Network: This type of network removes the network isolation between the container and the host. The container uses the network stack of the host, 
   and there is no need for port mapping.
3. None Network: This type of network removes all networking from the container, which means it cannot communicate with any other container or the host. 
   It is useful in situations where you want to create a completely isolated container.
4. Custom Networks: You can create your own custom networks in Docker using the 'docker network create' command. This allows you to define the subnet, 
   gateway, and other network settings for your containers.   

## P4 - What is the difference between docker images tags?
1. Immutable tags: These tags are fixed to a specific version of the image and cannot be changed. 
They are typically used to identify stable releases of an image, such as v1.0 or 1.2.3.
2. Mutable tags: These tags can be updated to refer to different versions of an image as following:
   - Latest: The "latest" tag refers to the most recent version of an image. This tag is typically used for development or testing purposes.
   - dev: This tag is often used for development purposes and is typically mutable because the image contents may change frequently as new features 
     are added or bugs are fixed.
   - Branch-specific tags: These tags refer to specific branches in a version control system, such as "master", "develop", or "release". 
     Images with these tags are typically used for continuous integration and deployment (CI/CD) pipelines.
   - Custom tags: Custom tags can be created by users to track specific versions or configurations of an image.  

## P5 - Create bridge network, two containers from ubuntu image with different names
## Create bridge network
   $ docker network create --driver bridge --subnet 192.168.0.1/24 AmirNetwork
   $ docker network ls 
## Create 2 containers with different names
   $ docker run -d -it --name c1 --network AmirNetwork ubuntu bash
   $ docker run -d -it --name c2 --network AmirNetwork ubuntu bash
## Ping from c1 to c2 using name, first install iputils-ping to allow 'ping' command 
   $ docker exec -it c1 bash
   $ apt-get update && apt-get install -y iputils-ping
   $ ping c2
